create database Otium_V2
use Otium_V2

create table Usuario (
	idUsuario int primary key,
	correo varchar(100),
	Usuario varchar(50) unique,
	contra varchar(50),
	fecha_Registro datetime
)

create table Perfil (
	idPerfil int primary key,
	idUsuario int foreign key references Usuario (idUsuario),
	idFoto int,
	nombreCompleto varchar(100)
)
create table Fotos (
	idFoto int primary key,
	nombreFoto varchar(200),
	rutaFoto varchar(255),
	idPerfil int foreign key references Perfil (idPerfil)
)

create table Publicacion (
	idPublicacion int primary key,
	idUsuarioPublico int foreign key references Usuario(idUsuario),
	contenido text, 
	fecha datetime
)

create table Likes (
	idLike int primary key,
	idPublicacion int foreign key references Publicacion (idPublicacion),
	fecha datetime
)

--Procedimiento almacenado para agregar en la tabla de Usuario
create proc insert_Usuario (
@idUsuario int,
@correo varchar(100),
@usuario varchar(50),
@contra varchar(50)
)
As
	Begin try
		insert into Usuario (idUsuario, correo, Usuario, contra, fecha_Registro) values (@idUsuario, @correo, @usuario, @contra, getdate() )
	End try

	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch



--Procedimiento almacenado para agregar en la tabla perfil
create proc insert_Perfil(
@idPerfil int,
@idUsuario int,
@idFoto int,
@nombre varchar(100)
)
As
	Begin Try
		insert into Perfil (idPerfil, idUsuario, idFoto, nombreCompleto) values (@idPerfil, @idUsuario, @idFoto, @nombre)
	End try

	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch


--Procedimiento almacenado para insertar una imagen
create proc insert_Fotos(
@idFoto int,
@idPerfil int ,
@nombre varchar(200),
@ruta varchar(255)
)
As
Begin
	Begin try
		insert into Fotos (idFoto, idPerfil, nombreFoto, rutaFoto ) values (@idFoto,@idPerfil, @nombre, @ruta)
	End try

	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch
End


--Procedimiento almacenado para insertar una publicacion.
create proc insert_Publicacion(
@idPublicacion int,
@idUsuario int ,
@contenido text
)
As
	Begin try
		insert into Publicacion(idPublicacion, idUsuarioPublico, contenido, fecha) values (@idPublicacion, @idPublicacion, @contenido, getdate())
	End try

	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch

--Procedimiento almacenado para insertar un Like
create proc insert_Like(
@idLike int,
@idPublicacion int
)
As
	Begin try
		insert into Likes (idLike, idPublicacion, fecha ) values (@idLike, @idPublicacion, getdate())
	End try

	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch

--------------------------------------------------------------------------------------------------------------
--Procedimiento almacenado para eliminar Usuario
create proc delete_Usuario(
@id int
)
As
	Begin Try
		delete from Publicacion where idUsuarioPublico = @id
		delete from Perfil where idUsuario = @id
		delete from Usuario where idUsuario = @id
	End try
	
	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch
--Procedimiento almacenado para eliminar Perfil
create proc delete_Perfil(
@id int
)
As
	Begin Try
		delete from Fotos where idPerfil = @id
		delete from Perfil where idPerfil = @id
	End try
	
	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch
--Proceso almacenado para eliminar foto.
create proc delete_Foto(
@id int
)
As
	Begin Try
		delete from Fotos where idFoto = @id
	End try
	
	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch
--Procedimiento almacenado para eliminar publicacion
create proc delete_Publicacion(
@id int
)
As
	Begin Try
		delete from Publicacion where idPublicacion = @id
		delete from Likes where idPublicacion = @id
	End try
	
	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch

--Procedimiento almacenado para eliminar likes
create proc delete_Like(
@id int
)
As
	Begin Try
		delete from Likes where idLike = @id
	End try
	
	Begin catch
		print	'No se pudo completar la accion de manera exitosa.'
	End catch

-----------------------------------------------------------------------------------------------------------------------------------------
--Proceso almacenado para editar usuario
create proc editar_Usuario(
@idUsuario int,
@correo varchar(100),
@Usuario varchar(50),
@contra varchar(50)
)
As
	Begin Try
		update Usuario set correo = @correo, Usuario = @Usuario, contra = @contra, fecha_Registro = getdate()
		where idUsuario = @idUsuario
	End Try

	Begin Catch
		print	'No se pudo completar la accion de manera exitosa.'
	End Catch

--Proceso almacenado para editar perfil
create proc editar_Perfil(
@idPerfil int,
@idFoto int,
@nombre varchar(100)
)
As
	Begin Try
		update Perfil set idFoto = @idFoto, nombreCompleto = @nombre
		where idPerfil = @idPerfil
	End Try

	Begin Catch
		print	'No se pudo completar la accion de manera exitosa.'
	End Catch

--Proceso almacenado para editar Fotos
create proc editar_Foto(
@idFoto int,
@nombre varchar(200),
@ruta varchar(255)
)
As
	Begin Try
		update Fotos set nombreFoto = @nombre, rutaFoto = @ruta
		where idFoto = @idFoto
	End Try

	Begin Catch
		print	'No se pudo completar la accion de manera exitosa.'
	End Catch

--Proceso almacenado para editar publicacion
create proc editar_Publicacion(
@id int,
@contenido text
)
As
	Begin Try
		update Publicacion set contenido = @contenido, fecha = GETDATE ()
		where idPublicacion = @id
	End Try

	Begin Catch
		print	'No se pudo completar la accion de manera exitosa.'
	End Catch
--Proceso almacenado para editar publicacion
create proc editar_Publicacion(
@id int,
@contenido text
)
As
	Begin Try
		update Publicacion set contenido = @contenido, fecha = GETDATE ()
		where idPublicacion = @id
	End Try

	Begin Catch
		print	'No se pudo completar la accion de manera exitosa.'
	End Catch
-------------------------------------------------------------------------------
--Funcion con Cube
create function cube_Usuario ()
returns table
As 
Return
	select count(*) as Suma
	from Usuario
	group by cube (idUsuario)

--Trigger que devuelve una consulta con el dato que acaba de ser insertado en Usuario
create trigger trigger_Usuario 
on Usuario after insert
As
	set nocount on
	declare @id int
	select @id = idUsuario from inserted
	select idUsuario, correo, Usuario, contra, fecha_Registro from Usuario
	where idUsuario = @id

--Trigger que devuelve una consulta con el dato que acaba de ser insertado en Perfil
create trigger trigger_Perfil
on Perfil after insert
As
	set nocount on
	declare @id int
	select @id = idPerfil from inserted
	select idPerfil, idUsuario, idFoto, nombreCompleto from Perfil
	where idPerfil = @id

--Trigger que devuelve una consulta con el dato que acaba de ser insertado en Fotos
create trigger trigger_Fotos
on Fotos after insert
As
	set nocount on
	declare @id int
	select @id = idFoto from inserted
	select idFoto, nombreFoto, rutaFoto, idPerfil from Fotos
	where idFoto = @id

--Trigger que devuelve una consulta con el dato que acaba de ser insertado en Publicacion
create trigger trigger_Publicacion
on Publicacion after insert
As
	set nocount on
	declare @id int
	select @id = idPublicacion from inserted
	select idPublicacion, idUsuarioPublico, contenido, fecha from Publicacion
	where idPublicacion = @id

--Trigger que devuelve una consulta con el dato que acaba de ser insertado en Like
create trigger trigger_Likes
on Likes after insert
As
	set nocount on
	declare @id int
	select @id = idLike from inserted
	select idLike, idPublicacion, fecha from Likes
	where idLike = @id
